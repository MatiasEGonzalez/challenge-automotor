version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: automotor_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: automotor_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docs/source/schema_automotor.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./docs/source/seeds.sql:/docker-entrypoint-initdb.d/02-seeds.sql:ro
    ports:
      - "5433:5432"
    networks:
      - automotor_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d automotor_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API NestJS
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: automotor_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: password
      DB_DATABASE: automotor_db
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - automotor_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend Angular con Nginx
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: automotor_web
    restart: unless-stopped
    ports:
      - "4200:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - automotor_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  automotor_network:
    driver: bridge
